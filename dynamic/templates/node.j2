resource "{{ provider }}_instance" "{{ name }}" {
{%- if provider == "aws" -%}
  {%- if architecture == "x86_64" %}
  ami                    = data.aws_ami.x86_64.id
  {%- elif architecture == 'aarch64' %}
  ami                    = data.aws_ami.aarch64.id
  {%- endif %}
  provider               = eessiaws




  ipv6_address_count     = 1
{%- endif %}

  instance_type          = "{{ type }}"

{%- if provider == "aws" %}
  subnet_id              = aws_subnet.{{ aws.regionÂ }}.id
  depends_on             = [aws_internet_gateway.{{ aws.region }}]
  vpc_security_group_ids = [aws_security_group.instance.id]
{%- endif %}

  key_name               = "{{ deployer_id }}-deployer-key"
  monitoring             = true

  root_block_device {
    volume_size = {{ storage }}
  }

  tags = {
    Issuer = "{{ issuer }}"
    Name  = "{{ description }}"
    DNS = "{{ name }}"
    User  = "{{ username }}"
    Slack = "{{ userslack }}"
    EOL = "{{ eol }}"
    Ephemeral = "True"
  }

  provisioner "file" {
    destination = "/tmp/provision.sh"
    content = templatefile("{{ template_directory }}/node_data.j2", {
        issuer = "{{ issuer }}"
        user = "{{ username }}"
        slack_user = "{{ userslack }}"
        node_name = "{{ name }}"
        aws_access_key_id = aws_iam_access_key.{{ name }}.id
        aws_secret_access_key = aws_iam_access_key.{{ name }}.secret
    })
  }

  provisioner "remote-exec" {
    inline = ["sh /tmp/provision.sh"]
  }

  connection {
    host = self.public_ip
    user = "eessi"
  }
}

resource "aws_route53_record" "{{ name }}_aaaa" {
  provider = eessiaws
  zone_id  = aws_route53_zone.dynamic.id
  name     = "{{ name }}.dynamic.infra.eessi-hpc.org"
  type     = "AAAA"
  ttl      = "300"
  records  = [{{ provider}}_instance.{{ name }}.ipv6_addresses[0]]
}

resource "aws_route53_record" "{{ name }}" {
  provider = eessiaws
  zone_id  = aws_route53_zone.dynamic.id
  name     = "{{ name }}.dynamic.infra.eessi-hpc.org"
  type     = "A"
  ttl      = "300"
  records  = [{{ provider}}_instance.{{ name }}.public_ip]
}

resource "aws_iam_user" "{{ name }}" {
  provider = eessiaws

  name = "node_user_{{ name }}"
  path = "/generated/"

  tags = {
    Managed = "terraform"
    Name = "IAM user for the node {{ name }}"
  }
}

resource "aws_iam_user_policy" "{{ name }}" {
  provider = eessiaws

  name = "node_user_policy_{{ name }}"
  user = aws_iam_user.{{ name }}.name

  # Terraform's "jsonencode" function converts a
  # Terraform expression result to valid JSON syntax.
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "s3:ListBucket",
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:GetBucketLocation",
          "s3:PutObject",
          "s3:PutObjectAcl",
        ]
        Effect = "Allow"
        Resource = [
          "arn:aws:s3:::eessi-staging",
          "arn:aws:s3:::eessi-staging/*",
        ]
      },
    ]
  })
}



resource "aws_iam_access_key" "{{ name }}" {
  provider = eessiaws
  user = aws_iam_user.{{ name }}.name
}
